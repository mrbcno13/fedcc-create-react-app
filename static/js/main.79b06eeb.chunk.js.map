{"version":3,"sources":["Contants.js","views/ListingPage.js","views/DetailPage.js","App.js","serviceWorker.js","index.js"],"names":["ImageJsonContext","React","createContext","properties","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","ListingPage","props","classes","imagesJson","useContext","useEffect","console","log","className","Container","maxWidth","Grid","container","item","xs","style","background","map","imgJson","sm","md","key","id","src","process","thumb","alt","title","DetailPage","App","useState","jsonFile","setJsonFile","loading","setLoading","axios","get","then","res","data","catch","e","error","feedJson","Provider","value","Suspense","fallback","exact","path","render","to","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"w8KAEaA,EAAmBC,IAAMC,cAAc,IAEvCC,EACI,4HCUXC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eAkCfC,MA9Bf,SAAqBC,GACnB,IAAMC,EAAUf,IACVgB,EAAaC,qBAAWrB,GAS9B,OAPAsB,qBAAU,WAER,OADAC,QAAQC,IAAIN,GACL,eAGN,CAACA,IAGF,yBAAKO,UAAWN,EAAQZ,MACtB,kBAACmB,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAClB,QAAS,GACvB,kBAACiB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,MAAO,CAACC,WAAY,OAAQpB,MAAO,SAAtD,UAIEO,EAAWc,KAAI,SAAAC,GAAO,OACpB,kBAACP,EAAA,EAAD,CAAME,MAAI,EAACM,GAAI,GAAIC,GAAI,EAAGC,IAAKH,EAAQI,IACrC,yBAAKC,IAAG,UAAKC,0BAAL,mBAAsCN,EAAQO,OAASC,IAAKR,EAAQS,gBCjC7EC,MAZf,SAAoB3B,GAOlB,OANAI,qBAAU,WAER,OADAC,QAAQC,IAAIN,GACL,eAGN,CAACA,IAEF,+B,QCsCW4B,MAlCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAeb,OAZA7B,qBAAU,WACR6B,GAAW,GACXC,IAAMC,IAAIlD,GAAwBmD,MAAK,SAAAC,GAAG,OAAIN,EAAYM,EAAIC,SAC7DC,OAAM,SAAAC,GACLnC,QAAQC,IAAIkC,GACZnC,QAAQoC,MAAR,uDAA8DxD,EAA9D,+BACA8C,EAAYW,MAEbN,MAAK,kBAAMH,GAAW,QAEtB,IAGD,kBAACnD,EAAiB6D,SAAlB,CAA2BC,MAAOd,GAC9BE,EAAU,KACV,yBAAKzB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAMsC,SAAP,CAAgBC,SAAU,8CACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,YACjD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,QAAQC,OAAQ,SAACjD,GAAD,OAAW,kBAAC,EAAgBA,MAC9D,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,mBAAmBC,OAAQ,SAACjD,GAAD,OAAW,kBAAC,EAAeA,YC1BpEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAE,GACLpC,QAAQoC,MAAMA,EAAMwB,c","file":"static/js/main.79b06eeb.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ImageJsonContext = React.createContext([]);\n\nexport const properties = ({\n    jsonFeedUrl: \"https://bitbucket.org/adrenalingit/fed-coding-challenge-react/raw/7a58dc67359000cfad5541b726b84f73fd0b392e/feed/data.json\"\n})","import React, {useEffect, useContext} from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport {ImageJsonContext} from '../Contants';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction ListingPage(props) {\n  const classes = useStyles();\n  const imagesJson = useContext(ImageJsonContext);\n\n  useEffect(() => {\n    console.log(props);\n    return () => {\n      // cleanup\n    }\n  }, [props])\n\n  return (\n    <div className={classes.root}>\n      <Container maxWidth=\"xl\">\n        <Grid container spacing={0}>\n          <Grid item xs={12} style={{background: \"#000\", color: \"#fff\"}}>\n            HEADER\n          </Grid>\n          {\n            imagesJson.map(imgJson => \n              <Grid item sm={12} md={6} key={imgJson.id}>\n                <img src={`${process.env.PUBLIC_URL}/assets/${imgJson.thumb}`} alt={imgJson.title} />\n              </Grid>)\n          }\n        </Grid>\n      </Container>\n    </div>\n  )\n}\n\nexport default ListingPage\n","import React, {useEffect} from 'react'\n\nfunction DetailPage(props) {\n  useEffect(() => {\n    console.log(props);\n    return () => {\n      // cleanup\n    }\n  }, [props])\n  return (\n    <div></div>\n  )\n}\n\nexport default DetailPage\n","import React, {useEffect,useState} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport ListingPage from './views/ListingPage';\nimport DetailPage from './views/DetailPage.js';\nimport { properties, ImageJsonContext } from \"./Contants\";\nimport * as feedJson from './feed/data.json';\n\nfunction App() {\n  const [jsonFile, setJsonFile] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    axios.get(properties.jsonFeedUrl).then(res => setJsonFile(res.data))\n    .catch(e => {\n      console.log(e);\n      console.error(`Error while attempting retrieve online file: ${properties.jsonFeedUrl}. Loading local json feed.`);\n      setJsonFile(feedJson.default);\n    })\n    .then(() => setLoading(false));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <ImageJsonContext.Provider value={jsonFile}>\n      { loading ? null :\n        <div className=\"App\">\n          <Router>\n            <React.Suspense fallback={<div> Loading... </div>}>\n              <Switch>\n                <Route exact path=\"/\" render={() => <Redirect to=\"list\"></Redirect>} />\n                <Route exact path=\"/list\" render={(props) => <ListingPage {...props}></ListingPage>} />\n                <Route exact path=\"/detail/:imageId\" render={(props) => <DetailPage {...props}></DetailPage>} />\n              </Switch>\n            </React.Suspense>\n          </Router>\n        </div>\n      }\n    </ImageJsonContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}